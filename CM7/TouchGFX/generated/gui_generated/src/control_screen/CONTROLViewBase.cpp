/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/control_screen/CONTROLViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

CONTROLViewBase::CONTROLViewBase() :
    buttonCallback(this, &CONTROLViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &CONTROLViewBase::flexButtonCallbackHandler),
    interaction_Delay_DRIVE_page_pressCounter(0),
    interaction_Delay_SAFETY_pageCounter(0),
    interaction_Delay_DEBUG_pageCounter(0)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    BACKGROUND.setXY(0, 0);
    BACKGROUND.setBitmap(touchgfx::Bitmap(BITMAP_PAGE_CONTROL_ID));
    add(BACKGROUND);

    PopUp.setXY(279, 236);
    PopUp.setBitmap(touchgfx::Bitmap(BITMAP_POPUP_CAN_OFF_1_ID));
    PopUp.setVisible(false);
    add(PopUp);

    PAGE_Drive.setXY(0, 0);
    PAGE_Drive.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_UP_OFF_ID), touchgfx::Bitmap(BITMAP_BOTTOM_UP_ON_ID));
    PAGE_Drive.setAction(buttonCallback);
    add(PAGE_Drive);

    PAGE_Control.setXY(0, 69);
    PAGE_Control.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_MID_UP_ON_SELECT_ID), touchgfx::Bitmap(BITMAP_BOTTOM_MID_UP_OFF_SELECT_ID));
    add(PAGE_Control);

    PAGE_Safety.setXY(0, 137);
    PAGE_Safety.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_MID_DOWN_OFF_ID), touchgfx::Bitmap(BITMAP_BOTTOM_MID_DOWN_ON_ID));
    PAGE_Safety.setAction(buttonCallback);
    add(PAGE_Safety);

    PAGE_Debug.setXY(0, 204);
    PAGE_Debug.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_DOWN_OFF_ID), touchgfx::Bitmap(BITMAP_BOTTOM_DOWN_ON_ID));
    PAGE_Debug.setAction(buttonCallback);
    add(PAGE_Debug);

    INCLINACAO_VOL_gauge.setBackground(touchgfx::Bitmap(BITMAP_GAUGE_BASE_ID));
    INCLINACAO_VOL_gauge.setPosition(267, 3, 118, 112);
    INCLINACAO_VOL_gauge.setCenter(57.3f, 57.3f);
    INCLINACAO_VOL_gauge.setStartEndAngle(-150, 150);
    INCLINACAO_VOL_gauge.setRange(-150, 150);
    INCLINACAO_VOL_gauge.setValue(-60);
    INCLINACAO_VOL_gauge.setEasingEquation(touchgfx::EasingEquations::elasticEaseOut);
    INCLINACAO_VOL_gauge.setNeedle(BITMAP_GAUGE_DRIVE_ID, 16.8f, 30.4f);
    INCLINACAO_VOL_gauge.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    INCLINACAO_VOL_gauge.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(INCLINACAO_VOL_gauge);

    INCLINACAO_CAR_gauge.setBackground(touchgfx::Bitmap(BITMAP_GAUGE_BASE_ID));
    INCLINACAO_CAR_gauge.setPosition(267, 119, 118, 112);
    INCLINACAO_CAR_gauge.setCenter(57.3f, 57.3f);
    INCLINACAO_CAR_gauge.setStartEndAngle(-150, 150);
    INCLINACAO_CAR_gauge.setRange(-150, 150);
    INCLINACAO_CAR_gauge.setValue(60);
    INCLINACAO_CAR_gauge.setEasingEquation(touchgfx::EasingEquations::elasticEaseOut);
    INCLINACAO_CAR_gauge.setNeedle(BITMAP_GAUGE_CAR_ID, 16.8f, 30.4f);
    INCLINACAO_CAR_gauge.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    INCLINACAO_CAR_gauge.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    INCLINACAO_CAR_gauge.setArcVisible();
    INCLINACAO_CAR_gaugePainter.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    INCLINACAO_CAR_gauge.getArc().setPainter(INCLINACAO_CAR_gaugePainter);
    INCLINACAO_CAR_gauge.getArc().setRadius(0);
    INCLINACAO_CAR_gauge.getArc().setLineWidth(0);
    add(INCLINACAO_CAR_gauge);

    torque.setPosition(429, 214, 48, 15);
    torque.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    torque.setLinespacing(0);
    Unicode::snprintf(torqueBuffer, TORQUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1RGB).getText());
    torque.setWildcard(torqueBuffer);
    torque.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1RT6));
    add(torque);

    giroscopio_xz.setPosition(421, 174, 56, 15);
    giroscopio_xz.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    giroscopio_xz.setLinespacing(0);
    Unicode::snprintf(giroscopio_xzBuffer, GIROSCOPIO_XZ_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8M3D).getText());
    giroscopio_xz.setWildcard(giroscopio_xzBuffer);
    giroscopio_xz.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UYYY));
    add(giroscopio_xz);

    acelerometro_xy.setPosition(420, 134, 57, 15);
    acelerometro_xy.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    acelerometro_xy.setLinespacing(0);
    Unicode::snprintf(acelerometro_xyBuffer, ACELEROMETRO_XY_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8PEH).getText());
    acelerometro_xy.setWildcard(acelerometro_xyBuffer);
    acelerometro_xy.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WNF9));
    add(acelerometro_xy);

    motor_L_Giros.setPosition(179, 174, 57, 19);
    motor_L_Giros.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    motor_L_Giros.setLinespacing(0);
    Unicode::snprintf(motor_L_GirosBuffer, MOTOR_L_GIROS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_E0PP).getText());
    motor_L_Giros.setWildcard(motor_L_GirosBuffer);
    motor_L_Giros.setTypedText(touchgfx::TypedText(T___SINGLEUSE_B63V));
    add(motor_L_Giros);

    motor_R_Giros.setPosition(94, 175, 57, 19);
    motor_R_Giros.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    motor_R_Giros.setLinespacing(0);
    Unicode::snprintf(motor_R_GirosBuffer, MOTOR_R_GIROS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_UHXO).getText());
    motor_R_Giros.setWildcard(motor_R_GirosBuffer);
    motor_R_Giros.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VEMN));
    add(motor_R_Giros);

    motor_L_Potencia.setPosition(179, 132, 57, 19);
    motor_L_Potencia.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    motor_L_Potencia.setLinespacing(0);
    Unicode::snprintf(motor_L_PotenciaBuffer, MOTOR_L_POTENCIA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_3SYR).getText());
    motor_L_Potencia.setWildcard(motor_L_PotenciaBuffer);
    motor_L_Potencia.setTypedText(touchgfx::TypedText(T___SINGLEUSE_73T9));
    add(motor_L_Potencia);

    motor_R_Potencia.setPosition(94, 131, 57, 19);
    motor_R_Potencia.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    motor_R_Potencia.setLinespacing(0);
    Unicode::snprintf(motor_R_PotenciaBuffer, MOTOR_R_POTENCIA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_U5Z4).getText());
    motor_R_Potencia.setWildcard(motor_R_PotenciaBuffer);
    motor_R_Potencia.setTypedText(touchgfx::TypedText(T___SINGLEUSE_05D5));
    add(motor_R_Potencia);

    motor_L_Torque.setPosition(180, 88, 57, 19);
    motor_L_Torque.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    motor_L_Torque.setLinespacing(0);
    Unicode::snprintf(motor_L_TorqueBuffer, MOTOR_L_TORQUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_2EH6).getText());
    motor_L_Torque.setWildcard(motor_L_TorqueBuffer);
    motor_L_Torque.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OGBX));
    add(motor_L_Torque);

    motor_R_Torque.setPosition(94, 88, 57, 19);
    motor_R_Torque.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    motor_R_Torque.setLinespacing(0);
    Unicode::snprintf(motor_R_TorqueBuffer, MOTOR_R_TORQUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZTD4).getText());
    motor_R_Torque.setWildcard(motor_R_TorqueBuffer);
    motor_R_Torque.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VOXZ));
    add(motor_R_Torque);

    motor_L_Temperature.setPosition(180, 43, 57, 19);
    motor_L_Temperature.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    motor_L_Temperature.setLinespacing(0);
    Unicode::snprintf(motor_L_TemperatureBuffer, MOTOR_L_TEMPERATURE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZZ4Z).getText());
    motor_L_Temperature.setWildcard(motor_L_TemperatureBuffer);
    motor_L_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z5XJ));
    add(motor_L_Temperature);

    motor_R_Temperature.setPosition(95, 44, 57, 19);
    motor_R_Temperature.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    motor_R_Temperature.setLinespacing(0);
    Unicode::snprintf(motor_R_TemperatureBuffer, MOTOR_R_TEMPERATURE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OSBO).getText());
    motor_R_Temperature.setWildcard(motor_R_TemperatureBuffer);
    motor_R_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2G9Q));
    add(motor_R_Temperature);

    ICON_Frenagem.setXY(425, 96);
    ICON_Frenagem.setBitmap(touchgfx::Bitmap(BITMAP_FRENAGEM_OFF_ID));
    add(ICON_Frenagem);

    ICON_Modo.setXY(436, 55);
    ICON_Modo.setBitmap(touchgfx::Bitmap(BITMAP_MODO_ENDURO_ID));
    add(ICON_Modo);

    BOTTOM_Info_LoRa.setXY(420, 0);
    BOTTOM_Info_LoRa.setBitmaps(touchgfx::Bitmap(BITMAP_INFO_LORA_ID), touchgfx::Bitmap(BITMAP_INFO_LORA_SELECT_ID));
    BOTTOM_Info_LoRa.setAction(buttonCallback);
    add(BOTTOM_Info_LoRa);

    ICON_LoRa.setXY(441, 15);
    ICON_LoRa.setBitmap(touchgfx::Bitmap(BITMAP_LORA_OFF_ID));
    add(ICON_LoRa);

    FRONTGROUND.setPosition(80, 0, 400, 272);
    FRONTGROUND.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    FRONTGROUND.setAlpha(0);
    add(FRONTGROUND);

    BOTTON_lora.setBoxWithBorderPosition(0, 0, 67, 272);
    BOTTON_lora.setBorderSize(5);
    BOTTON_lora.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    BOTTON_lora.setAlpha(0);
    BOTTON_lora.setVisible(false);
    BOTTON_lora.setAction(flexButtonCallback);
    BOTTON_lora.setPosition(414, 1, 67, 272);
    add(BOTTON_lora);

    LORA_PopUp.setXY(480, 0);
    LORA_PopUp.setVisible(false);
    add(LORA_PopUp);
}

CONTROLViewBase::~CONTROLViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void CONTROLViewBase::setupScreen()
{
    LORA_PopUp.initialize();
    transitionBegins();
}

void CONTROLViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &PAGE_Drive)
    {
        //Interaction_DRIVE_page_press
        //When PAGE_Drive clicked call virtual function
        //Call TransitionEnd_Control
        TransitionEnd_Control();
    
        //Interaction_Delay_DRIVE_page_press
        //When Interaction_DRIVE_page_press completed delay
        //Delay for 251 ms (15 Ticks)
        interaction_Delay_DRIVE_page_pressCounter = INTERACTION_DELAY_DRIVE_PAGE_PRESS_DURATION;
    }
    if (&src == &PAGE_Safety)
    {
        //Interaction_SAFETY_page_press
        //When PAGE_Safety clicked call virtual function
        //Call TransitionEnd_Control
        TransitionEnd_Control();
    
        //Interaction_Delay_SAFETY_page
        //When Interaction_SAFETY_page_press completed delay
        //Delay for 251 ms (15 Ticks)
        interaction_Delay_SAFETY_pageCounter = INTERACTION_DELAY_SAFETY_PAGE_DURATION;
    }
    if (&src == &PAGE_Debug)
    {
        //Interaction_DEBUG_page_press
        //When PAGE_Debug clicked call virtual function
        //Call TransitionEnd_Control
        TransitionEnd_Control();
    
        //Interaction_Delay_DEBUG_page
        //When Interaction_DEBUG_page_press completed delay
        //Delay for 251 ms (15 Ticks)
        interaction_Delay_DEBUG_pageCounter = INTERACTION_DELAY_DEBUG_PAGE_DURATION;
    }
    if (&src == &BOTTOM_Info_LoRa)
    {
        //Interaction_LORA_Begin
        //When BOTTOM_Info_LoRa clicked call virtual function
        //Call LORA_Begin
        LORA_Begin();
    }
}

void CONTROLViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &BOTTON_lora)
    {
        //Interaction_LORA_End
        //When BOTTON_lora clicked call virtual function
        //Call LORA_End
        LORA_End();
    }
}

void CONTROLViewBase::handleTickEvent()
{
    if (interaction_Delay_DRIVE_page_pressCounter > 0)
    {
        interaction_Delay_DRIVE_page_pressCounter--;
        if (interaction_Delay_DRIVE_page_pressCounter == 0)
        {
                //Interaction__Screen_DRIVE_page
                //When Interaction_Delay_DRIVE_page_press completed change screen to DRIVER
                //Go to DRIVER with no screen transition
                application().gotoDRIVERScreenNoTransition();
        }
    }

    if (interaction_Delay_SAFETY_pageCounter > 0)
    {
        interaction_Delay_SAFETY_pageCounter--;
        if (interaction_Delay_SAFETY_pageCounter == 0)
        {
                //Interaction_Screen_SAFETY_page
                //When Interaction_Delay_SAFETY_page completed change screen to SAFETY
                //Go to SAFETY with no screen transition
                application().gotoSAFETYScreenNoTransition();
        }
    }

    if (interaction_Delay_DEBUG_pageCounter > 0)
    {
        interaction_Delay_DEBUG_pageCounter--;
        if (interaction_Delay_DEBUG_pageCounter == 0)
        {
                //Interaction_Screen_DEBUG_page
                //When Interaction_Delay_DEBUG_page completed change screen to DEBUG
                //Go to DEBUG with no screen transition
                application().gotoDEBUGScreenNoTransition();
        }
    }
}

void CONTROLViewBase::transitionBegins()
{
    //Interaction_TransitionBegin
    //When screen transition begins call virtual function
    //Call TransitionBegin_Control
    TransitionBegin_Control();
}
