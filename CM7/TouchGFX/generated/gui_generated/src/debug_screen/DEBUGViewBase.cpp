/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/debug_screen/DEBUGViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

DEBUGViewBase::DEBUGViewBase() :
    buttonCallback(this, &DEBUGViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &DEBUGViewBase::flexButtonCallbackHandler),
    interaction_Delay_DRIVER_pageCounter(0),
    interaction_Delay_CONTROL_pageCounter(0),
    interaction_Delay_SAFETY_pageCounter(0)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    BACKGROUND.setXY(0, 0);
    BACKGROUND.setBitmap(touchgfx::Bitmap(BITMAP_PAGE_DEBUG_ID));
    add(BACKGROUND);

    DEBUG_Telemetria.setXY(317, 19);
    DEBUG_Telemetria.setBitmaps(touchgfx::Bitmap(BITMAP_DEBUG_TELEMETRY_INFO_ID), touchgfx::Bitmap(BITMAP_DEBUG_TELEMETRY_INFO_SELECT_ID));
    DEBUG_Telemetria.setAction(buttonCallback);
    add(DEBUG_Telemetria);

    DEBUG_Datalogger.setXY(175, 24);
    DEBUG_Datalogger.setBitmaps(touchgfx::Bitmap(BITMAP_DEBUG_DATALOGGER_INFO_ID), touchgfx::Bitmap(BITMAP_DEBUG_DATALOGGER_INFO_SELECT_ID));
    DEBUG_Datalogger.setAction(buttonCallback);
    add(DEBUG_Datalogger);

    DEBUG_BMS.setXY(179, 198);
    DEBUG_BMS.setBitmaps(touchgfx::Bitmap(BITMAP_DEBUG_BMS_INFO_ID), touchgfx::Bitmap(BITMAP_DEBUG_BMS_INFO_SELECT_ID));
    DEBUG_BMS.setAction(buttonCallback);
    add(DEBUG_BMS);

    DEBUG_ECU.setXY(71, 199);
    DEBUG_ECU.setBitmaps(touchgfx::Bitmap(BITMAP_DEBUG_ECU_INFO_ID), touchgfx::Bitmap(BITMAP_DEBUG_ECU_INFO_SELECT_ID));
    DEBUG_ECU.setAction(buttonCallback);
    add(DEBUG_ECU);

    PopUp.setXY(279, 236);
    PopUp.setBitmap(touchgfx::Bitmap(BITMAP_POPUP_CAN_OFF_1_ID));
    PopUp.setVisible(false);
    add(PopUp);

    PAGE_Drive.setXY(0, 0);
    PAGE_Drive.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_UP_OFF_ID), touchgfx::Bitmap(BITMAP_BOTTOM_UP_ON_ID));
    PAGE_Drive.setAction(buttonCallback);
    add(PAGE_Drive);

    PAGE_Control.setXY(0, 69);
    PAGE_Control.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_MID_UP_OFF_ID), touchgfx::Bitmap(BITMAP_BOTTOM_MID_UP_ON_ID));
    PAGE_Control.setAction(buttonCallback);
    add(PAGE_Control);

    PAGE_Safety.setXY(0, 137);
    PAGE_Safety.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_MID_DOWN_OFF_ID), touchgfx::Bitmap(BITMAP_BOTTOM_MID_DOWN_ON_ID));
    PAGE_Safety.setAction(buttonCallback);
    add(PAGE_Safety);

    PAGE_Debug.setXY(0, 204);
    PAGE_Debug.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_DOWN_ON_SELECT_ID), touchgfx::Bitmap(BITMAP_BOTTOM_DOWN_OFF_SELECT_ID));
    add(PAGE_Debug);

    DataRate_Telemetria.setPosition(319, 36, 74, 19);
    DataRate_Telemetria.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    DataRate_Telemetria.setLinespacing(-2);
    Unicode::snprintf(DataRate_TelemetriaBuffer, DATARATE_TELEMETRIA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6DP2).getText());
    DataRate_Telemetria.setWildcard(DataRate_TelemetriaBuffer);
    DataRate_Telemetria.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T2YW));
    add(DataRate_Telemetria);

    DataRate_Datalogger.setPosition(179, 41, 74, 19);
    DataRate_Datalogger.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    DataRate_Datalogger.setLinespacing(-2);
    Unicode::snprintf(DataRate_DataloggerBuffer, DATARATE_DATALOGGER_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LG9N).getText());
    DataRate_Datalogger.setWildcard(DataRate_DataloggerBuffer);
    DataRate_Datalogger.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8ZPX));
    add(DataRate_Datalogger);

    DataRate_BMS.setPosition(181, 214, 74, 19);
    DataRate_BMS.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    DataRate_BMS.setLinespacing(-2);
    Unicode::snprintf(DataRate_BMSBuffer, DATARATE_BMS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_UZMT).getText());
    DataRate_BMS.setWildcard(DataRate_BMSBuffer);
    DataRate_BMS.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AMAG));
    add(DataRate_BMS);

    DataRate_ECU.setPosition(75, 216, 74, 17);
    DataRate_ECU.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    DataRate_ECU.setLinespacing(-2);
    Unicode::snprintf(DataRate_ECUBuffer, DATARATE_ECU_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_AKYW).getText());
    DataRate_ECU.setWildcard(DataRate_ECUBuffer);
    DataRate_ECU.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VZZG));
    add(DataRate_ECU);

    Beacon_Leap.setPosition(426, 214, 54, 17);
    Beacon_Leap.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Beacon_Leap.setLinespacing(-2);
    Unicode::snprintf(Beacon_LeapBuffer, BEACON_LEAP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_T60R).getText());
    Beacon_Leap.setWildcard(Beacon_LeapBuffer);
    Beacon_Leap.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QUF4));
    add(Beacon_Leap);

    BOTTOM_Info_LoRa.setXY(420, 0);
    BOTTOM_Info_LoRa.setBitmaps(touchgfx::Bitmap(BITMAP_INFO_LORA_ID), touchgfx::Bitmap(BITMAP_INFO_LORA_SELECT_ID));
    BOTTOM_Info_LoRa.setAction(buttonCallback);
    add(BOTTOM_Info_LoRa);

    ICON_ECU.setXY(436, 174);
    ICON_ECU.setBitmap(touchgfx::Bitmap(BITMAP_CONEXAO_OFF_ID));
    add(ICON_ECU);

    ICON_BMS.setXY(434, 134);
    ICON_BMS.setBitmap(touchgfx::Bitmap(BITMAP_CONEXAO_OFF_ID));
    add(ICON_BMS);

    ICON_Telemetria.setXY(434, 94);
    ICON_Telemetria.setBitmap(touchgfx::Bitmap(BITMAP_CONEXAO_OFF_ID));
    add(ICON_Telemetria);

    ICON_Datalogger.setXY(434, 54);
    ICON_Datalogger.setBitmap(touchgfx::Bitmap(BITMAP_CONEXAO_OFF_ID));
    add(ICON_Datalogger);

    ICON_LoRa.setXY(441, 15);
    ICON_LoRa.setBitmap(touchgfx::Bitmap(BITMAP_LORA_OFF_ID));
    add(ICON_LoRa);

    FRONTGROUND.setPosition(66, 0, 414, 272);
    FRONTGROUND.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    FRONTGROUND.setAlpha(0);
    add(FRONTGROUND);

    BOTTON_lora.setBoxWithBorderPosition(0, 0, 68, 272);
    BOTTON_lora.setBorderSize(5);
    BOTTON_lora.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    BOTTON_lora.setAlpha(0);
    BOTTON_lora.setVisible(false);
    BOTTON_lora.setAction(flexButtonCallback);
    BOTTON_lora.setPosition(413, 1, 68, 272);
    add(BOTTON_lora);

    LORA_PopUp.setXY(480, 0);
    LORA_PopUp.setVisible(false);
    add(LORA_PopUp);

    PopUp_ECU.setXY(71, 272);
    add(PopUp_ECU);

    BOTTON_PopUp_ECU.setBoxWithBorderPosition(0, 0, 415, 272);
    BOTTON_PopUp_ECU.setBorderSize(5);
    BOTTON_PopUp_ECU.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    BOTTON_PopUp_ECU.setAlpha(0);
    BOTTON_PopUp_ECU.setVisible(false);
    BOTTON_PopUp_ECU.setAction(flexButtonCallback);
    BOTTON_PopUp_ECU.setPosition(66, 1, 415, 272);
    add(BOTTON_PopUp_ECU);

    PopUp_BMS.setXY(71, 272);
    add(PopUp_BMS);

    BOTTON_PopUp_BMS.setBoxWithBorderPosition(0, 0, 415, 272);
    BOTTON_PopUp_BMS.setBorderSize(5);
    BOTTON_PopUp_BMS.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    BOTTON_PopUp_BMS.setAlpha(0);
    BOTTON_PopUp_BMS.setVisible(false);
    BOTTON_PopUp_BMS.setAction(flexButtonCallback);
    BOTTON_PopUp_BMS.setPosition(66, 1, 415, 272);
    add(BOTTON_PopUp_BMS);

    PopUp_Datalogger.setXY(71, -103);
    add(PopUp_Datalogger);

    BOTTON_PopUp_Datalogger.setBoxWithBorderPosition(0, 0, 415, 272);
    BOTTON_PopUp_Datalogger.setBorderSize(5);
    BOTTON_PopUp_Datalogger.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    BOTTON_PopUp_Datalogger.setAlpha(0);
    BOTTON_PopUp_Datalogger.setVisible(false);
    BOTTON_PopUp_Datalogger.setAction(flexButtonCallback);
    BOTTON_PopUp_Datalogger.setPosition(66, 1, 415, 272);
    add(BOTTON_PopUp_Datalogger);

    PopUp_Telemetry.setXY(71, -103);
    add(PopUp_Telemetry);

    BOTTON_PopUp_Telemetry.setBoxWithBorderPosition(0, 0, 415, 272);
    BOTTON_PopUp_Telemetry.setBorderSize(5);
    BOTTON_PopUp_Telemetry.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    BOTTON_PopUp_Telemetry.setAlpha(0);
    BOTTON_PopUp_Telemetry.setVisible(false);
    BOTTON_PopUp_Telemetry.setAction(flexButtonCallback);
    BOTTON_PopUp_Telemetry.setPosition(66, 1, 415, 272);
    add(BOTTON_PopUp_Telemetry);
}

DEBUGViewBase::~DEBUGViewBase()
{

}

void DEBUGViewBase::setupScreen()
{
    LORA_PopUp.initialize();
    PopUp_ECU.initialize();
    PopUp_BMS.initialize();
    PopUp_Datalogger.initialize();
    PopUp_Telemetry.initialize();
    transitionBegins();
}

void DEBUGViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &PAGE_Drive)
    {
        //Interaction_DRIVER_page_press
        //When PAGE_Drive clicked call virtual function
        //Call TransitionEnd_Debug
        TransitionEnd_Debug();
    
        //Interaction_Delay_DRIVER_page
        //When Interaction_DRIVER_page_press completed delay
        //Delay for 251 ms (15 Ticks)
        interaction_Delay_DRIVER_pageCounter = INTERACTION_DELAY_DRIVER_PAGE_DURATION;
    }
    if (&src == &PAGE_Control)
    {
        //Interaction_CONTROL_page_press
        //When PAGE_Control clicked call virtual function
        //Call TransitionEnd_Debug
        TransitionEnd_Debug();
    
        //Interaction_Delay_CONTROL_page
        //When Interaction_CONTROL_page_press completed delay
        //Delay for 251 ms (15 Ticks)
        interaction_Delay_CONTROL_pageCounter = INTERACTION_DELAY_CONTROL_PAGE_DURATION;
    }
    if (&src == &PAGE_Safety)
    {
        //Interaction_SAFETY_page_press
        //When PAGE_Safety clicked call virtual function
        //Call TransitionEnd_Debug
        TransitionEnd_Debug();
    
        //Interaction_Delay_SAFETY_page
        //When Interaction_SAFETY_page_press completed delay
        //Delay for 251 ms (15 Ticks)
        interaction_Delay_SAFETY_pageCounter = INTERACTION_DELAY_SAFETY_PAGE_DURATION;
    }
    if (&src == &BOTTOM_Info_LoRa)
    {
        //Interaction_LORA_Begin
        //When BOTTOM_Info_LoRa clicked call virtual function
        //Call LORA_Begin
        LORA_Begin();
    }
    if (&src == &DEBUG_Telemetria)
    {
        //Interaction_Telemetry_PopUp_Begin
        //When DEBUG_Telemetria clicked call virtual function
        //Call Telemetry_PopUp_Begin
        Telemetry_PopUp_Begin();
    }
    if (&src == &DEBUG_Datalogger)
    {
        //Interaction_Datalogger_PopUp_Begin
        //When DEBUG_Datalogger clicked call virtual function
        //Call Datalogger_PopUp_Begin
        Datalogger_PopUp_Begin();
    }
    if (&src == &DEBUG_BMS)
    {
        //Interaction_BMS_PopUp_Begin
        //When DEBUG_BMS clicked call virtual function
        //Call BMS_PopUp_Begin
        BMS_PopUp_Begin();
    }
    if (&src == &DEBUG_ECU)
    {
        //Interaction_ECU_PopUp_Begin
        //When DEBUG_ECU clicked call virtual function
        //Call ECU_PopUp_Begin
        ECU_PopUp_Begin();
    }
}

void DEBUGViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &BOTTON_lora)
    {
        //Interaction_LORA_End
        //When BOTTON_lora clicked call virtual function
        //Call LORA_End
        LORA_End();
    }
    if (&src == &BOTTON_PopUp_Telemetry)
    {
        //Interaction_Telemetry_PopUp_End
        //When BOTTON_PopUp_Telemetry clicked call virtual function
        //Call Telemetry_PopUp_End
        Telemetry_PopUp_End();
    }
    if (&src == &BOTTON_PopUp_Datalogger)
    {
        //Interaction_Datalogger_PopUp_End
        //When BOTTON_PopUp_Datalogger clicked call virtual function
        //Call Datalogger_PopUp_End
        Datalogger_PopUp_End();
    }
    if (&src == &BOTTON_PopUp_BMS)
    {
        //Interaction_BMS_PopUp_End
        //When BOTTON_PopUp_BMS clicked call virtual function
        //Call BMS_PopUp_End
        BMS_PopUp_End();
    }
    if (&src == &BOTTON_PopUp_ECU)
    {
        //Interaction_ECU_PopUp_End
        //When BOTTON_PopUp_ECU clicked call virtual function
        //Call ECU_PopUp_End
        ECU_PopUp_End();
    }
}

void DEBUGViewBase::handleTickEvent()
{
    if (interaction_Delay_DRIVER_pageCounter > 0)
    {
        interaction_Delay_DRIVER_pageCounter--;
        if (interaction_Delay_DRIVER_pageCounter == 0)
        {
                //Interaction_Screen_DRIVER_page
                //When Interaction_Delay_DRIVER_page completed change screen to DRIVER
                //Go to DRIVER with no screen transition
                application().gotoDRIVERScreenNoTransition();
        }
    }

    if (interaction_Delay_CONTROL_pageCounter > 0)
    {
        interaction_Delay_CONTROL_pageCounter--;
        if (interaction_Delay_CONTROL_pageCounter == 0)
        {
                //Interaction_Screen_CONTROL_page
                //When Interaction_Delay_CONTROL_page completed change screen to CONTROL
                //Go to CONTROL with no screen transition
                application().gotoCONTROLScreenNoTransition();
        }
    }

    if (interaction_Delay_SAFETY_pageCounter > 0)
    {
        interaction_Delay_SAFETY_pageCounter--;
        if (interaction_Delay_SAFETY_pageCounter == 0)
        {
                //Interaction_Screen_SAFETY_page
                //When Interaction_Delay_SAFETY_page completed change screen to SAFETY
                //Go to SAFETY with no screen transition
                application().gotoSAFETYScreenNoTransition();
        }
    }
}

void DEBUGViewBase::transitionBegins()
{
    //Interaction_TransitionBegin
    //When screen transition begins call virtual function
    //Call TransitionBegin_Debug
    TransitionBegin_Debug();
}
