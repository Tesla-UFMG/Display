/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/animation_screen/ANIMATIONView.hpp>
#include <gui/animation_screen/ANIMATIONPresenter.hpp>
#include <gui/driver_screen/DRIVERView.hpp>
#include <gui/driver_screen/DRIVERPresenter.hpp>
#include <gui/control_screen/CONTROLView.hpp>
#include <gui/control_screen/CONTROLPresenter.hpp>
#include <gui/safety_screen/SAFETYView.hpp>
#include <gui/safety_screen/SAFETYPresenter.hpp>
#include <gui/debug_screen/DEBUGView.hpp>
#include <gui/debug_screen/DEBUGPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
}

/*
 * Screen Transition Declarations
 */

// ANIMATION

void FrontendApplicationBase::gotoANIMATIONScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoANIMATIONScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoANIMATIONScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ANIMATIONView, ANIMATIONPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// DRIVER

void FrontendApplicationBase::gotoDRIVERScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoDRIVERScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoDRIVERScreenNoTransitionImpl()
{
    touchgfx::makeTransition<DRIVERView, DRIVERPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// CONTROL

void FrontendApplicationBase::gotoCONTROLScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCONTROLScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoCONTROLScreenNoTransitionImpl()
{
    touchgfx::makeTransition<CONTROLView, CONTROLPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// SAFETY

void FrontendApplicationBase::gotoSAFETYScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSAFETYScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSAFETYScreenNoTransitionImpl()
{
    touchgfx::makeTransition<SAFETYView, SAFETYPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// DEBUG

void FrontendApplicationBase::gotoDEBUGScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoDEBUGScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoDEBUGScreenNoTransitionImpl()
{
    touchgfx::makeTransition<DEBUGView, DEBUGPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
