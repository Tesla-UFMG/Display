/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/driver_screen/DRIVERViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

DRIVERViewBase::DRIVERViewBase() :
    buttonCallback(this, &DRIVERViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &DRIVERViewBase::flexButtonCallbackHandler),
    interaction_Delay_CONTROL_pageCounter(0),
    interaction_Delay_SAFETY_pageCounter(0),
    interaction_Delay_DEBUG_pageCounter(0)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    BACKGROUND.setXY(1, 0);
    BACKGROUND.setBitmap(touchgfx::Bitmap(BITMAP_PAGE_DRIVE_ID));
    add(BACKGROUND);

    POTENCIMETRO_gauge.setBackground(touchgfx::Bitmap(BITMAP_VELOCIMETRO_BASE_ID));
    POTENCIMETRO_gauge.setPosition(73, 6, 285, 263);
    POTENCIMETRO_gauge.setCenter(128.8f, 131.5f);
    POTENCIMETRO_gauge.setStartEndAngle(-180, 80);
    POTENCIMETRO_gauge.setRange(0, 130);
    POTENCIMETRO_gauge.setValue(130);
    POTENCIMETRO_gauge.setEasingEquation(touchgfx::EasingEquations::sineEaseInOut);
    POTENCIMETRO_gauge.setNeedle(BITMAP_VELOCIMETRO_INDICATOR_ID, 66.5f, 111.5f);
    POTENCIMETRO_gauge.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    POTENCIMETRO_gauge.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    POTENCIMETRO_gauge.setArcVisible();
    POTENCIMETRO_gaugePainter.setBitmap(touchgfx::Bitmap(BITMAP_VELOCIMETRO_PROGRESS_ID));
    POTENCIMETRO_gauge.getArc().setPainter(POTENCIMETRO_gaugePainter);
    POTENCIMETRO_gauge.getArc().setRadius(78);
    POTENCIMETRO_gauge.getArc().setLineWidth(50);
    POTENCIMETRO_gauge.getArc().setCapPrecision(180);
    POTENCIMETRO_gauge.setArcPosition(23.4f, 25.0f, 270, 270);
    POTENCIMETRO_gauge.putArcOnTop();
    add(POTENCIMETRO_gauge);

    CHARGE_Progress.setXY(367, -1);
    CHARGE_Progress.setProgressIndicatorPosition(0, 0, 47, 236);
    CHARGE_Progress.setRange(0, 100);
    CHARGE_Progress.setBackground(touchgfx::Bitmap(BITMAP_CHARGE_PROGRESS_ID));
    CHARGE_ProgressPainter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    CHARGE_Progress.setPainter(CHARGE_ProgressPainter);
    CHARGE_Progress.setStart(25, 0);
    CHARGE_Progress.setEnd(25, 237);
    CHARGE_Progress.setLineWidth(50);
    CHARGE_Progress.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    CHARGE_Progress.setValue(0);
    add(CHARGE_Progress);

    PopUp.setXY(279, 236);
    PopUp.setBitmap(touchgfx::Bitmap(BITMAP_POPUP_CAN_OFF_1_ID));
    PopUp.setVisible(false);
    add(PopUp);

    PAGE_Debug.setXY(0, 204);
    PAGE_Debug.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_DOWN_OFF_ID), touchgfx::Bitmap(BITMAP_BOTTOM_DOWN_ON_ID));
    PAGE_Debug.setAction(buttonCallback);
    add(PAGE_Debug);

    PAGE_Safety.setXY(0, 137);
    PAGE_Safety.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_MID_DOWN_OFF_ID), touchgfx::Bitmap(BITMAP_BOTTOM_MID_DOWN_ON_ID));
    PAGE_Safety.setAction(buttonCallback);
    add(PAGE_Safety);

    PAGE_Control.setXY(0, 69);
    PAGE_Control.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_MID_UP_OFF_ID), touchgfx::Bitmap(BITMAP_BOTTOM_MID_UP_ON_ID));
    PAGE_Control.setAction(buttonCallback);
    add(PAGE_Control);

    PAGE_Drive.setXY(0, 0);
    PAGE_Drive.setBitmaps(touchgfx::Bitmap(BITMAP_BOTTOM_UP_ON_SELECT_ID), touchgfx::Bitmap(BITMAP_BOTTOM_UP_OFF_ID));
    add(PAGE_Drive);

    brake_bias.setPosition(429, 134, 39, 15);
    brake_bias.setColor(touchgfx::Color::getColorFromRGB(255, 0, 21));
    brake_bias.setLinespacing(0);
    Unicode::snprintf(brake_biasBuffer, BRAKE_BIAS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9RBT).getText());
    brake_bias.setWildcard(brake_biasBuffer);
    brake_bias.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MUJP));
    add(brake_bias);

    tensao_min.setPosition(423, 174, 54, 15);
    tensao_min.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    tensao_min.setLinespacing(0);
    Unicode::snprintf(tensao_minBuffer, TENSAO_MIN_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NBZU).getText());
    tensao_min.setWildcard(tensao_minBuffer);
    tensao_min.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Y52B));
    add(tensao_min);

    temp_max.setPosition(429, 213, 47, 15);
    temp_max.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    temp_max.setLinespacing(0);
    Unicode::snprintf(temp_maxBuffer, TEMP_MAX_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VBXZ).getText());
    temp_max.setWildcard(temp_maxBuffer);
    temp_max.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P6H6));
    add(temp_max);

    VELOCIMETRO_digital.setPosition(161, 95, 84, 76);
    VELOCIMETRO_digital.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    VELOCIMETRO_digital.setLinespacing(0);
    Unicode::snprintf(VELOCIMETRO_digitalBuffer, VELOCIMETRO_DIGITAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_CFOO).getText());
    VELOCIMETRO_digital.setWildcard(VELOCIMETRO_digitalBuffer);
    VELOCIMETRO_digital.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G2QD));
    add(VELOCIMETRO_digital);

    torque.setPosition(419, 95, 60, 15);
    torque.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    torque.setLinespacing(0);
    Unicode::snprintf(torqueBuffer, TORQUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_SGXO).getText());
    torque.setWildcard(torqueBuffer);
    torque.setTypedText(touchgfx::TypedText(T___SINGLEUSE_82UY));
    add(torque);

    charge_percent.setPosition(300, 6, 58, 18);
    charge_percent.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    charge_percent.setLinespacing(0);
    Unicode::snprintf(charge_percentBuffer, CHARGE_PERCENT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PEFS).getText());
    charge_percent.setWildcard(charge_percentBuffer);
    charge_percent.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W9BV));
    add(charge_percent);

    hodometro.setPosition(269, 165, 78, 19);
    hodometro.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    hodometro.setLinespacing(0);
    Unicode::snprintf(hodometroBuffer, HODOMETRO_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LLL4).getText());
    hodometro.setWildcard(hodometroBuffer);
    hodometro.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JCHU));
    add(hodometro);

    ICON_Modo.setXY(443, 55);
    ICON_Modo.setBitmap(touchgfx::Bitmap(BITMAP_MODO_ERRO_ID));
    add(ICON_Modo);

    BOTTOM_Info_LoRa.setXY(420, 0);
    BOTTOM_Info_LoRa.setBitmaps(touchgfx::Bitmap(BITMAP_INFO_LORA_ID), touchgfx::Bitmap(BITMAP_INFO_LORA_SELECT_ID));
    BOTTOM_Info_LoRa.setAction(buttonCallback);
    add(BOTTOM_Info_LoRa);

    ICON_LoRa.setXY(441, 15);
    ICON_LoRa.setBitmap(touchgfx::Bitmap(BITMAP_LORA_OFF_ID));
    add(ICON_LoRa);

    FRONTGROUND.setPosition(66, 1, 414, 272);
    FRONTGROUND.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    FRONTGROUND.setAlpha(0);
    add(FRONTGROUND);

    BOTTON_lora.setBoxWithBorderPosition(0, 0, 67, 272);
    BOTTON_lora.setBorderSize(5);
    BOTTON_lora.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    BOTTON_lora.setAlpha(0);
    BOTTON_lora.setVisible(false);
    BOTTON_lora.setAction(flexButtonCallback);
    BOTTON_lora.setPosition(414, 1, 67, 272);
    add(BOTTON_lora);

    LORA_PopUp.setXY(480, 0);
    LORA_PopUp.setVisible(false);
    add(LORA_PopUp);
}

DRIVERViewBase::~DRIVERViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void DRIVERViewBase::setupScreen()
{
    LORA_PopUp.initialize();
    transitionBegins();
}

void DRIVERViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &PAGE_Control)
    {
        //Interaction_CONTROL_page_press
        //When PAGE_Control clicked call virtual function
        //Call TransitionEnd_Driver
        TransitionEnd_Driver();
    
        //Interaction_Delay_CONTROL_page
        //When Interaction_CONTROL_page_press completed delay
        //Delay for 251 ms (15 Ticks)
        interaction_Delay_CONTROL_pageCounter = INTERACTION_DELAY_CONTROL_PAGE_DURATION;
    }
    if (&src == &PAGE_Safety)
    {
        //Interaction_SAFETY_page_press
        //When PAGE_Safety clicked call virtual function
        //Call TransitionEnd_Driver
        TransitionEnd_Driver();
    
        //Interaction_Delay_SAFETY_page
        //When Interaction_SAFETY_page_press completed delay
        //Delay for 251 ms (15 Ticks)
        interaction_Delay_SAFETY_pageCounter = INTERACTION_DELAY_SAFETY_PAGE_DURATION;
    }
    if (&src == &PAGE_Debug)
    {
        //Interaction_DEBUG_page_press
        //When PAGE_Debug clicked call virtual function
        //Call TransitionEnd_Driver
        TransitionEnd_Driver();
    
        //Interaction_Delay_DEBUG_page
        //When Interaction_DEBUG_page_press completed delay
        //Delay for 251 ms (15 Ticks)
        interaction_Delay_DEBUG_pageCounter = INTERACTION_DELAY_DEBUG_PAGE_DURATION;
    }
    if (&src == &BOTTOM_Info_LoRa)
    {
        //Interaction_LORA_Begin
        //When BOTTOM_Info_LoRa clicked call virtual function
        //Call LORA_Begin
        LORA_Begin();
    }
}

void DRIVERViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &BOTTON_lora)
    {
        //Interaction_LORA_End
        //When BOTTON_lora clicked call virtual function
        //Call LORA_End
        LORA_End();
    }
}

void DRIVERViewBase::transitionBegins()
{
    //Interaction_TransitionBegin
    //When screen transition begins call virtual function
    //Call TransitionBegin_Driver
    TransitionBegin_Driver();
}

void DRIVERViewBase::handleTickEvent()
{
    if (interaction_Delay_CONTROL_pageCounter > 0)
    {
        interaction_Delay_CONTROL_pageCounter--;
        if (interaction_Delay_CONTROL_pageCounter == 0)
        {
                //Interaction_Screen_CONTROL_page
                //When Interaction_Delay_CONTROL_page completed change screen to CONTROL
                //Go to CONTROL with no screen transition
                application().gotoCONTROLScreenNoTransition();
        }
    }

    if (interaction_Delay_SAFETY_pageCounter > 0)
    {
        interaction_Delay_SAFETY_pageCounter--;
        if (interaction_Delay_SAFETY_pageCounter == 0)
        {
                //Interaction_Screen_SAFETY_page
                //When Interaction_Delay_SAFETY_page completed change screen to SAFETY
                //Go to SAFETY with no screen transition
                application().gotoSAFETYScreenNoTransition();
        }
    }

    if (interaction_Delay_DEBUG_pageCounter > 0)
    {
        interaction_Delay_DEBUG_pageCounter--;
        if (interaction_Delay_DEBUG_pageCounter == 0)
        {
                //Interaction_Screen_DEBUG_page_press
                //When Interaction_Delay_DEBUG_page completed change screen to DEBUG
                //Go to DEBUG with no screen transition
                application().gotoDEBUGScreenNoTransition();
        }
    }
}
