/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DEBUGVIEWBASE_HPP
#define DEBUGVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/debug_screen/DEBUGPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <gui/containers/LoRA_PopUp.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>
#include <gui/containers/ECU_PopUp.hpp>
#include <gui/containers/BMS_PopUp.hpp>
#include <gui/containers/Datalogger_PopUp.hpp>
#include <gui/containers/Telemetry_PopUp.hpp>

class DEBUGViewBase : public touchgfx::View<DEBUGPresenter>
{
public:
    DEBUGViewBase();
    virtual ~DEBUGViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();
    virtual void transitionBegins();

    /*
     * Virtual Action Handlers
     */
    virtual void TransitionEnd_Debug()
    {
        // Override and implement this function in DEBUG
    }
    virtual void TransitionBegin_Debug()
    {
        // Override and implement this function in DEBUG
    }
    virtual void LORA_Begin()
    {
        // Override and implement this function in DEBUG
    }
    virtual void LORA_End()
    {
        // Override and implement this function in DEBUG
    }
    virtual void Telemetry_PopUp_Begin()
    {
        // Override and implement this function in DEBUG
    }
    virtual void Telemetry_PopUp_End()
    {
        // Override and implement this function in DEBUG
    }
    virtual void Datalogger_PopUp_Begin()
    {
        // Override and implement this function in DEBUG
    }
    virtual void Datalogger_PopUp_End()
    {
        // Override and implement this function in DEBUG
    }
    virtual void BMS_PopUp_Begin()
    {
        // Override and implement this function in DEBUG
    }
    virtual void BMS_PopUp_End()
    {
        // Override and implement this function in DEBUG
    }
    virtual void ECU_PopUp_Begin()
    {
        // Override and implement this function in DEBUG
    }
    virtual void ECU_PopUp_End()
    {
        // Override and implement this function in DEBUG
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image BACKGROUND;
    touchgfx::Button DEBUG_Telemetria;
    touchgfx::Button DEBUG_Datalogger;
    touchgfx::Button DEBUG_BMS;
    touchgfx::Button DEBUG_ECU;
    touchgfx::Image PopUp;
    touchgfx::Button PAGE_Drive;
    touchgfx::Button PAGE_Control;
    touchgfx::Button PAGE_Safety;
    touchgfx::Button PAGE_Debug;
    touchgfx::TextAreaWithOneWildcard DataRate_Telemetria;
    touchgfx::TextAreaWithOneWildcard DataRate_Datalogger;
    touchgfx::TextAreaWithOneWildcard DataRate_BMS;
    touchgfx::TextAreaWithOneWildcard DataRate_ECU;
    touchgfx::TextAreaWithOneWildcard Beacon_Leap;
    touchgfx::Button BOTTOM_Info_LoRa;
    touchgfx::Image ICON_ECU;
    touchgfx::Image ICON_BMS;
    touchgfx::Image ICON_Telemetria;
    touchgfx::Image ICON_Datalogger;
    touchgfx::Image ICON_LoRa;
    touchgfx::FadeAnimator< touchgfx::Box > FRONTGROUND;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  BOTTON_lora;
    touchgfx::MoveAnimator< LoRA_PopUp > LORA_PopUp;
    touchgfx::MoveAnimator< ECU_PopUp > PopUp_ECU;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  BOTTON_PopUp_ECU;
    touchgfx::MoveAnimator< BMS_PopUp > PopUp_BMS;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  BOTTON_PopUp_BMS;
    touchgfx::MoveAnimator< Datalogger_PopUp > PopUp_Datalogger;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  BOTTON_PopUp_Datalogger;
    touchgfx::MoveAnimator< Telemetry_PopUp > PopUp_Telemetry;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  BOTTON_PopUp_Telemetry;

    /*
     * Wildcard Buffers
     */
    static const uint16_t DATARATE_TELEMETRIA_SIZE = 5;
    touchgfx::Unicode::UnicodeChar DataRate_TelemetriaBuffer[DATARATE_TELEMETRIA_SIZE];
    static const uint16_t DATARATE_DATALOGGER_SIZE = 5;
    touchgfx::Unicode::UnicodeChar DataRate_DataloggerBuffer[DATARATE_DATALOGGER_SIZE];
    static const uint16_t DATARATE_BMS_SIZE = 5;
    touchgfx::Unicode::UnicodeChar DataRate_BMSBuffer[DATARATE_BMS_SIZE];
    static const uint16_t DATARATE_ECU_SIZE = 5;
    touchgfx::Unicode::UnicodeChar DataRate_ECUBuffer[DATARATE_ECU_SIZE];
    static const uint16_t BEACON_LEAP_SIZE = 5;
    touchgfx::Unicode::UnicodeChar Beacon_LeapBuffer[BEACON_LEAP_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<DEBUGViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<DEBUGViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Delay Variable Declarations
     */
    static const uint16_t INTERACTION_DELAY_DRIVER_PAGE_DURATION = 15;
    uint16_t interaction_Delay_DRIVER_pageCounter;
    static const uint16_t INTERACTION_DELAY_CONTROL_PAGE_DURATION = 15;
    uint16_t interaction_Delay_CONTROL_pageCounter;
    static const uint16_t INTERACTION_DELAY_SAFETY_PAGE_DURATION = 15;
    uint16_t interaction_Delay_SAFETY_pageCounter;

};

#endif // DEBUGVIEWBASE_HPP
