/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CONTROLVIEWBASE_HPP
#define CONTROLVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/control_screen/CONTROLPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/Gauge.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <gui/containers/LoRA_PopUp.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>

class CONTROLViewBase : public touchgfx::View<CONTROLPresenter>
{
public:
    CONTROLViewBase();
    virtual ~CONTROLViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();
    virtual void transitionBegins();

    /*
     * Virtual Action Handlers
     */
    virtual void TransitionEnd_Control()
    {
        // Override and implement this function in CONTROL
    }
    virtual void TransitionBegin_Control()
    {
        // Override and implement this function in CONTROL
    }
    virtual void LORA_Begin()
    {
        // Override and implement this function in CONTROL
    }
    virtual void LORA_End()
    {
        // Override and implement this function in CONTROL
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image BACKGROUND;
    touchgfx::Image PopUp;
    touchgfx::Button PAGE_Drive;
    touchgfx::Button PAGE_Control;
    touchgfx::Button PAGE_Safety;
    touchgfx::Button PAGE_Debug;
    touchgfx::FadeAnimator< touchgfx::Gauge > INCLINACAO_VOL_gauge;
    touchgfx::FadeAnimator< touchgfx::Gauge > INCLINACAO_CAR_gauge;
    touchgfx::PainterRGB565 INCLINACAO_CAR_gaugePainter;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > torque;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > giroscopio_xz;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > acelerometro_xy;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > motor_L_Giros;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > motor_R_Giros;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > motor_L_Potencia;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > motor_R_Potencia;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > motor_L_Torque;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > motor_R_Torque;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > motor_L_Temperature;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > motor_R_Temperature;
    touchgfx::Image ICON_Frenagem;
    touchgfx::Image ICON_Modo;
    touchgfx::Button BOTTOM_Info_LoRa;
    touchgfx::Image ICON_LoRa;
    touchgfx::FadeAnimator< touchgfx::Box > FRONTGROUND;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  BOTTON_lora;
    touchgfx::MoveAnimator< LoRA_PopUp > LORA_PopUp;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TORQUE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar torqueBuffer[TORQUE_SIZE];
    static const uint16_t GIROSCOPIO_XZ_SIZE = 5;
    touchgfx::Unicode::UnicodeChar giroscopio_xzBuffer[GIROSCOPIO_XZ_SIZE];
    static const uint16_t ACELEROMETRO_XY_SIZE = 5;
    touchgfx::Unicode::UnicodeChar acelerometro_xyBuffer[ACELEROMETRO_XY_SIZE];
    static const uint16_t MOTOR_L_GIROS_SIZE = 5;
    touchgfx::Unicode::UnicodeChar motor_L_GirosBuffer[MOTOR_L_GIROS_SIZE];
    static const uint16_t MOTOR_R_GIROS_SIZE = 5;
    touchgfx::Unicode::UnicodeChar motor_R_GirosBuffer[MOTOR_R_GIROS_SIZE];
    static const uint16_t MOTOR_L_POTENCIA_SIZE = 5;
    touchgfx::Unicode::UnicodeChar motor_L_PotenciaBuffer[MOTOR_L_POTENCIA_SIZE];
    static const uint16_t MOTOR_R_POTENCIA_SIZE = 5;
    touchgfx::Unicode::UnicodeChar motor_R_PotenciaBuffer[MOTOR_R_POTENCIA_SIZE];
    static const uint16_t MOTOR_L_TORQUE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar motor_L_TorqueBuffer[MOTOR_L_TORQUE_SIZE];
    static const uint16_t MOTOR_R_TORQUE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar motor_R_TorqueBuffer[MOTOR_R_TORQUE_SIZE];
    static const uint16_t MOTOR_L_TEMPERATURE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar motor_L_TemperatureBuffer[MOTOR_L_TEMPERATURE_SIZE];
    static const uint16_t MOTOR_R_TEMPERATURE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar motor_R_TemperatureBuffer[MOTOR_R_TEMPERATURE_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<CONTROLViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<CONTROLViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Delay Variable Declarations
     */
    static const uint16_t INTERACTION_DELAY_DRIVE_PAGE_PRESS_DURATION = 15;
    uint16_t interaction_Delay_DRIVE_page_pressCounter;
    static const uint16_t INTERACTION_DELAY_SAFETY_PAGE_DURATION = 15;
    uint16_t interaction_Delay_SAFETY_pageCounter;
    static const uint16_t INTERACTION_DELAY_DEBUG_PAGE_DURATION = 15;
    uint16_t interaction_Delay_DEBUG_pageCounter;

};

#endif // CONTROLVIEWBASE_HPP
