/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DRIVERVIEWBASE_HPP
#define DRIVERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/driver_screen/DRIVERPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Gauge.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565Bitmap.hpp>
#include <touchgfx/containers/progress_indicators/LineProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <gui/containers/LoRA_PopUp.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>

class DRIVERViewBase : public touchgfx::View<DRIVERPresenter>
{
public:
    DRIVERViewBase();
    virtual ~DRIVERViewBase();
    virtual void setupScreen();
    virtual void transitionBegins();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void TransitionBegin_Driver()
    {
        // Override and implement this function in DRIVER
    }
    virtual void TransitionEnd_Driver()
    {
        // Override and implement this function in DRIVER
    }
    virtual void LORA_Begin()
    {
        // Override and implement this function in DRIVER
    }
    virtual void LORA_End()
    {
        // Override and implement this function in DRIVER
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image BACKGROUND;
    touchgfx::Gauge POTENCIMETRO_gauge;
    touchgfx::PainterRGB565Bitmap POTENCIMETRO_gaugePainter;
    touchgfx::FadeAnimator< touchgfx::LineProgress > CHARGE_Progress;
    touchgfx::PainterRGB565 CHARGE_ProgressPainter;
    touchgfx::Image PopUp;
    touchgfx::Button PAGE_Debug;
    touchgfx::Button PAGE_Safety;
    touchgfx::Button PAGE_Control;
    touchgfx::Button PAGE_Drive;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > brake_bias;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > tensao_min;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > temp_max;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > VELOCIMETRO_digital;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > torque;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > charge_percent;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > hodometro;
    touchgfx::Image ICON_Modo;
    touchgfx::Button BOTTOM_Info_LoRa;
    touchgfx::Image ICON_LoRa;
    touchgfx::FadeAnimator< touchgfx::Box > FRONTGROUND;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  BOTTON_lora;
    touchgfx::MoveAnimator< LoRA_PopUp > LORA_PopUp;

    /*
     * Wildcard Buffers
     */
    static const uint16_t BRAKE_BIAS_SIZE = 5;
    touchgfx::Unicode::UnicodeChar brake_biasBuffer[BRAKE_BIAS_SIZE];
    static const uint16_t TENSAO_MIN_SIZE = 5;
    touchgfx::Unicode::UnicodeChar tensao_minBuffer[TENSAO_MIN_SIZE];
    static const uint16_t TEMP_MAX_SIZE = 5;
    touchgfx::Unicode::UnicodeChar temp_maxBuffer[TEMP_MAX_SIZE];
    static const uint16_t VELOCIMETRO_DIGITAL_SIZE = 5;
    touchgfx::Unicode::UnicodeChar VELOCIMETRO_digitalBuffer[VELOCIMETRO_DIGITAL_SIZE];
    static const uint16_t TORQUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar torqueBuffer[TORQUE_SIZE];
    static const uint16_t CHARGE_PERCENT_SIZE = 5;
    touchgfx::Unicode::UnicodeChar charge_percentBuffer[CHARGE_PERCENT_SIZE];
    static const uint16_t HODOMETRO_SIZE = 5;
    touchgfx::Unicode::UnicodeChar hodometroBuffer[HODOMETRO_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<DRIVERViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<DRIVERViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Delay Variable Declarations
     */
    static const uint16_t INTERACTION_DELAY_CONTROL_PAGE_DURATION = 15;
    uint16_t interaction_Delay_CONTROL_pageCounter;
    static const uint16_t INTERACTION_DELAY_SAFETY_PAGE_DURATION = 15;
    uint16_t interaction_Delay_SAFETY_pageCounter;
    static const uint16_t INTERACTION_DELAY_DEBUG_PAGE_DURATION = 15;
    uint16_t interaction_Delay_DEBUG_pageCounter;

};

#endif // DRIVERVIEWBASE_HPP
