/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef LORA_POPUPBASE_HPP
#define LORA_POPUPBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>

class LoRA_PopUpBase : public touchgfx::Container
{
public:
    LoRA_PopUpBase();
    virtual ~LoRA_PopUpBase();
    virtual void initialize();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void LoRa_Config_Begin()
    {
        // Override and implement this function in LoRA_PopUp
    }
    virtual void LoRa_Config_End()
    {
        // Override and implement this function in LoRA_PopUp
    }
    virtual void LoRa_Config_Set_Position()
    {
        // Override and implement this function in LoRA_PopUp
    }
    virtual void BT_BAND_UP_Callback()
    {
        // Override and implement this function in LoRA_PopUp
    }
    virtual void BT_BAND_DOWN_Callback()
    {
        // Override and implement this function in LoRA_PopUp
    }
    virtual void BT_SF_UP_Callback()
    {
        // Override and implement this function in LoRA_PopUp
    }
    virtual void BT_SF_DOWN_Callback()
    {
        // Override and implement this function in LoRA_PopUp
    }
    virtual void BT_CR_UP_Callback()
    {
        // Override and implement this function in LoRA_PopUp
    }
    virtual void BT_CR_DOWN_Callback()
    {
        // Override and implement this function in LoRA_PopUp
    }
    virtual void FREQUENCIA_Callback(int value)
    {
        // Override and implement this function in LoRA_PopUp
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Image LoRa_background;
    touchgfx::TextAreaWithOneWildcard FREQUENCIA;
    touchgfx::TextAreaWithOneWildcard CODING_RATE;
    touchgfx::TextAreaWithOneWildcard SPREAD_FACTOR;
    touchgfx::TextAreaWithOneWildcard BANDWIDTH;
    touchgfx::TextAreaWithOneWildcard USER_ID;
    touchgfx::TextAreaWithOneWildcard DATA_Rate;
    touchgfx::TextAreaWithOneWildcard VERSION;
    touchgfx::Image STATE;
    touchgfx::TextAreaWithOneWildcard RSSI;
    touchgfx::MoveAnimator< touchgfx::Slider > SLIDER_FREQ;
    touchgfx::FadeAnimator< touchgfx::Button > LoRa_Info;
    touchgfx::FadeAnimator< touchgfx::Button > LoRa_Config;
    touchgfx::FadeAnimator< touchgfx::MoveAnimator< touchgfx::Button > > BT_CR_DOWN;
    touchgfx::FadeAnimator< touchgfx::MoveAnimator< touchgfx::Button > > BT_CR_UP;
    touchgfx::FadeAnimator< touchgfx::MoveAnimator< touchgfx::Button > > BT_SF_DOWN;
    touchgfx::FadeAnimator< touchgfx::MoveAnimator< touchgfx::Button > > BT_SF_UP;
    touchgfx::FadeAnimator< touchgfx::MoveAnimator< touchgfx::Button > > BT_BAND_DOWN;
    touchgfx::FadeAnimator< touchgfx::MoveAnimator< touchgfx::Button > > BT_BAND_UP;

    /*
     * Wildcard Buffers
     */
    static const uint16_t FREQUENCIA_SIZE = 5;
    touchgfx::Unicode::UnicodeChar FREQUENCIABuffer[FREQUENCIA_SIZE];
    static const uint16_t CODING_RATE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar CODING_RATEBuffer[CODING_RATE_SIZE];
    static const uint16_t SPREAD_FACTOR_SIZE = 5;
    touchgfx::Unicode::UnicodeChar SPREAD_FACTORBuffer[SPREAD_FACTOR_SIZE];
    static const uint16_t BANDWIDTH_SIZE = 5;
    touchgfx::Unicode::UnicodeChar BANDWIDTHBuffer[BANDWIDTH_SIZE];
    static const uint16_t USER_ID_SIZE = 10;
    touchgfx::Unicode::UnicodeChar USER_IDBuffer[USER_ID_SIZE];
    static const uint16_t DATA_RATE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar DATA_RateBuffer[DATA_RATE_SIZE];
    static const uint16_t VERSION_SIZE = 10;
    touchgfx::Unicode::UnicodeChar VERSIONBuffer[VERSION_SIZE];
    static const uint16_t RSSI_SIZE = 5;
    touchgfx::Unicode::UnicodeChar RSSIBuffer[RSSI_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<LoRA_PopUpBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<LoRA_PopUpBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Delay Variable Declarations
     */
    static const uint16_t LORA_CONFIG_END_DELAY_DURATION = 15;
    uint16_t loRa_Config_End_DelayCounter;

};

#endif // LORA_POPUPBASE_HPP
